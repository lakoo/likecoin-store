version: 2
jobs:
  test:
    working_directory: ~/likecoin-store
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: likecoin-store-{{ .Environment.CACHE_UUID }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Dependencies
          command: npm config set unsafe-perm true && npm install
      - run:
          name: Lint Test
          command: npm run lint
      - run:
          name: Build
          command: npm run build
      - run:
          name: Server Test
          command: npm start
          background: true
      - run:
          name: wget Test
          command: |
            sleep 5
            wget -O- --retry-connrefused --waitretry=5 -t 10 http://127.0.0.1:3000/ > /dev/null
      - save_cache:
          key: likecoin-store-{{ .Environment.CACHE_UUID }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - ./node_modules
  unit_test:
    working_directory: ~/likecoin-store
    docker:
      - image: selenium/standalone-chrome:3.14.0
        user: root
    environment:
      - TERM: dumb
    steps:
      - checkout
      - restore_cache:
          key: likecoin-store-unit-test-{{ .Environment.CACHE_UUID }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Node Environment
          command: |
            sudo apt-get update
            sudo apt-get -y install curl git make g++ net-tools
            sudo curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get -y install nodejs
            sudo npm install codecov -g
      - run:
          name: Dependencies
          command: sudo npm config set unsafe-perm true && sudo npm install
      - run:
          name: Set Stub
          command: |
            cp ./test/stub/server/util/* ./server/util/
            cp ./test/stub/server/config/accounts.js ./server/config/accounts.js
            sed -i.bak "s/0xB97Df12b24C119A052EE0D4Ba97bAc59Da86AB4B/0x2fDF85d31b023c471a7F54cF2E67bA5767ADaECa/" ./constant/contract/likecoin.js
      - run:
          name: Unit Test (api)
          command: |
            npm run test:api
            rm -rf ./.nyc_output_merge && cp -R ./.nyc_output ./.nyc_output_merge
          environment:
            IS_TESTNET: TRUE
      - run:
          name: Build
          command: npm run build
          environment:
            IS_TESTNET: TRUE
            NODE_ENV: production
      - run:
          name: Unit Test (Nightwatch)
          command: |
            xvfb-run --server-args="-screen 0 1600x1200x24" npm run test:e2e
            cp -a ./.nyc_output_merge/. ./.nyc_output
          environment:
            IS_TESTNET: TRUE
            NODE_ENV: production
            IS_STANDALONE_TEST: TRUE
      - run:
          name: Upload coverage
          command: npm run report-coverage
      - store_artifacts:
          path: ./screenshots
      - save_cache:
          key: likecoin-store-unit-test-{{ .Environment.CACHE_UUID }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - ./node_modules
  deploy_rinkeby:
    working_directory: ~/likecoin-store
    docker:
      - image: lakoo/node-gcloud-docker
    environment:
      - DEBIAN_FRONTEND: noninteractive
      - TERM: dumb
      - GOOGLE_APPLICATION_CREDENTIALS: /tmp/account-auth.json
    steps:
      - checkout
      - run:
          name: Setup gcloud
          command: |
            echo ${TEST_GCLOUD_SERVICE_KEY} | base64 -d > /test-account-auth.json
            gcloud auth activate-service-account --key-file /test-account-auth.json
            gcloud config set project ${TEST_PROJECT_NAME}
            gcloud --quiet config set container/cluster ${POC_CLUSTER_NAME}
            gcloud config set compute/zone ${CLOUDSDK_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${POC_CLUSTER_NAME}
      - setup_docker_engine
      - run:
          name: Build image
          command: |
            gcloud docker -- pull us.gcr.io/${TEST_PROJECT_NAME}/like-store:latest || true
            docker build . -t like-store --cache-from us.gcr.io/${TEST_PROJECT_NAME}/like-store:latest \
            --build-arg IS_TESTNET='TRUE' \
            --build-arg FIREBASE_API_KEY=${TEST_FIREBASE_API_KEY} \
            --build-arg FIREBASE_AUTH_DOMAIN=${TEST_FIREBASE_AUTH_DOMAIN} \
            --build-arg FIREBASE_PROJECT_ID=${TEST_FIREBASE_PROJECT_ID} \
            --build-arg INTERCOM_APPID=${TEST_INTERCOM_APPID} \
            --build-arg GTM_ID=${TEST_GTM_ID} \
            --build-arg SENTRY_DSN=${TEST_SENTRY_DSN} \
            --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} \
            --build-arg SENTRY_REPORT_URI=${TEST_SENTRY_REPORT_URI} \
            --build-arg SENTRY_PROJECT=${TEST_SENTRY_PROJECT} \
            --build-arg RELEASE=${CIRCLE_SHA1}
            docker tag like-store:latest us.gcr.io/${TEST_PROJECT_NAME}/like-store:latest
            docker tag like-store:latest us.gcr.io/${TEST_PROJECT_NAME}/like-store:test-${CIRCLE_SHA1}
      - run:
          name: Push images
          command: |
            gcloud docker -- push us.gcr.io/${TEST_PROJECT_NAME}/like-store:latest
            gcloud docker -- push us.gcr.io/${TEST_PROJECT_NAME}/like-store:test-${CIRCLE_SHA1}
      - deploy:
          name: Deploy
          command: |
            kubectl patch deployment like-store-rinkeby -p '{"spec":{"template":{"spec":{"containers":[{"name":"like-store","image":"us.gcr.io/'"$TEST_PROJECT_NAME"'/like-store:test-'"$CIRCLE_SHA1"'"}]}}}}'
  deploy_mainnet:
    working_directory: ~/likecoin-store
    docker:
      - image: lakoo/node-gcloud-docker
    environment:
      - DEBIAN_FRONTEND: noninteractive
      - TERM: dumb
      - GOOGLE_APPLICATION_CREDENTIALS: /tmp/account-auth.json
    steps:
      - checkout
      - run:
          name: Setup gcloud
          command: |
            echo ${GCLOUD_SERVICE_KEY} | base64 -d > /account-auth.json
            gcloud auth activate-service-account --key-file /account-auth.json
            gcloud config set project ${PROJECT_NAME}
            gcloud --quiet config set container/cluster ${PROD_CLUSTER_NAME}
            gcloud config set compute/zone ${CLOUDSDK_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${PROD_CLUSTER_NAME}
      - setup_docker_engine
      - run:
          name: Build image
          command: |
            gcloud docker -- pull us.gcr.io/${PROJECT_NAME}/like-store:latest || true
            docker build . -t like-store --cache-from us.gcr.io/${PROJECT_NAME}/like-store:latest \
            --build-arg INTERCOM_APPID=${INTERCOM_APPID} \
            --build-arg GTM_ID=${GTM_ID} \
            --build-arg FIREBASE_API_KEY=${FIREBASE_API_KEY} \
            --build-arg FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN} \
            --build-arg FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID} \
            --build-arg SENTRY_DSN=${SENTRY_DSN} \
            --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} \
            --build-arg SENTRY_REPORT_URI=${SENTRY_REPORT_URI} \
            --build-arg SENTRY_PROJECT=${SENTRY_PROJECT} \
            --build-arg RELEASE=${CIRCLE_SHA1}
            docker tag like-store:latest us.gcr.io/${PROJECT_NAME}/like-store:latest
            docker tag like-store:latest us.gcr.io/${PROJECT_NAME}/like-store:main-${CIRCLE_SHA1}
      - run:
          name: Push images
          command: |
            gcloud docker -- push us.gcr.io/${PROJECT_NAME}/like-store:latest
            gcloud docker -- push us.gcr.io/${PROJECT_NAME}/like-store:main-${CIRCLE_SHA1}
      - deploy:
          name: Deploy
          command: |
            kubectl patch deployment like-store-main -p '{"spec":{"template":{"spec":{"containers":[{"name":"like-store","image":"us.gcr.io/'"$PROJECT_NAME"'/like-store:main-'"$CIRCLE_SHA1"'"}]}}}}'

workflows:
  version: 2
  build_and_test:
    jobs:
      - test
      - unit_test
      - hold_deploy_rinkeby:
          type: approval
          filters:
            branches:
              only:
                - master
                - develop
                - /feature.*/
          requires:
           - test
      - hold_deploy_mainnet:
          type: approval
          filters:
            branches:
              only: master
          requires:
           - test
      - deploy_rinkeby:
          requires:
            - hold_deploy_rinkeby
      - deploy_mainnet:
          requires:
            - hold_deploy_mainnet
